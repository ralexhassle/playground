version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: fullstack-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: fullstack_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 10s
      retries: 3

  # Application backend (optionnel, pour la prod)
  backend:
    build:
      context: .
      dockerfile: ./docker/backend/Dockerfile
    container_name: fullstack-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/fullstack_db
      LOG_LEVEL: info
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/backend:/app/apps/backend:ro
      - ./libs:/app/libs:ro
      - ./package.json:/app/package.json:ro
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:ro
      - ./tsconfig.base.json:/app/tsconfig.base.json:ro
    profiles:
      - production

  # Adminer pour l'administration de la base de données (optionnel)
  adminer:
    image: adminer:4.8.1
    container_name: fullstack-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: fullstack-network
